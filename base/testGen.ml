open QCheck.Arbitrary

let quint g1 g2 g3 g4 g5 = (fun rand -> (g1 rand, g2 rand, g3 rand, g4 rand, g5 rand))
  
(* create a generator for values generated by g that additionally satisfy predicate p *)
let pred_gen g p =
  (fun rand ->
     let rec loopUntil () =
       let cand = g rand in
	  if (p cand) then cand else loopUntil() in
       loopUntil ())

let test_size = 8192

let int_gen = (-3) -- 4
let posInt_gen = 0 -- 6

let intList_gen = list ~len:posInt_gen int_gen
let intListList_gen = list ~len:posInt_gen intList_gen
let intList_int_gen = pair intList_gen int_gen
let int_intList_gen = pair int_gen intList_gen
let intList_intList_gen = pair intList_gen intList_gen
let int_int_List_gen = list ~len:posInt_gen (pair int_gen int_gen)

let intList_tests = generate ~n:test_size intList_gen
let intListList_tests = generate ~n:test_size intListList_gen
let intList_int_tests = generate ~n:test_size intList_int_gen
let int_intList_tests = generate ~n:test_size int_intList_gen
let intList_intList_tests = generate ~n:test_size intList_intList_gen
let int_int_List_tests = generate ~n:test_size int_int_List_gen

let string_gen = string_len (0 -- 12)

  (* check if all characters in a string are distinct *)    
let distinct s =
  let l = BatString.to_list s in
  let (b, _) = 
    BatList.fold_left (fun (b,l) e -> let t = List.tl l in match BatList.index_of e t with None -> (b,t) | _ -> (false,t)) (true,l) l
  in b

let distinct_string_gen = pred_gen string_gen distinct     
  
let string_int_gen = pair string_gen int_gen
let string_char_gen = pair string_gen char
let string_int_int_gen = triple string_gen int_gen int_gen
let int_char_gen = pair int_gen char
let string_int_char_gen = triple string_gen int_gen char
let distinct_string_int_int_int_gen = quad distinct_string_gen int_gen int_gen int_gen
let distinct_string_int_int_int_gen = quad distinct_string_gen int_gen int_gen int_gen
let distinct_string_int_int_int_int_gen = quint distinct_string_gen int_gen int_gen int_gen int_gen
  
let string_tests = generate ~n:test_size string_gen
let string_int_tests = generate ~n:test_size string_int_gen
let string_char_tests = generate ~n:test_size string_char_gen
let string_int_int_tests = generate ~n:test_size string_int_int_gen
let int_char_tests = generate ~n:test_size int_char_gen
let string_int_char_tests = generate ~n:test_size string_int_char_gen
let distinct_string_int_int_int_tests = generate ~n:test_size distinct_string_int_int_int_gen
let distinct_string_int_int_int_int_tests = generate ~n:test_size distinct_string_int_int_int_int_gen

