 ==>
5 tests for loop #1.

(*) Checking loop invariant:
================================================================================
[#] Starting Loop Invariant Generation ...

   + Found guard in B4 for loop #1

     - post_1 : (true & (j = 6))
     - guard : (j >= i)

   [Q1] Abduction query = ((j >= i) | (true & (j = 6)))
   [#] Simplified query: ((j >= i) | (true & (j = 6)))

    [%] Inferring {true} [k = 1] (0f x 5t) ...                                     
    [?] Verifying [k = 1] --- true                            
      [+] Added test ... [ 0, 1 ]

    [%] Removing conflicts ...  @2 @3
    [%] Inferring {true} [k = 1] (1f x 6t) ...                                     
    [?] Verifying [k = 1] --- (j > 1)                            
      [+] Added test ... [ 2, 3 ]

    [%] Removing conflicts ...  @2 @3
    [%] Inferring {true} [k = 1] (2f x 7t) ...                                     
    [?] Verifying [k = 1] --- (6 <= j)                            
      [+] Added test ... [ 7, 8 ]

    [%] Removing conflicts ...  @2 @3 @4 @5
    [%] Inferring {true} [k = 1] (3f x 8t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (i - 1)))                            
      [+] Added test ... [ 0, 2 ]

    [%] Inferring {true} [k = 1] (3f x 9t) ...                                     
    [?] Verifying [k = 1] --- (6 <= j) & (! (j = (i - 1)))                            
      [+] Added test ... [ 7, 9 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6
    [%] Inferring {true} [k = 1] (4f x 10t) ...                                     
    [?] Verifying [k = 1] --- (! (j = ((i - 1) - 1))) & (! (j = (i - 1)))                            
      [+] Added test ... [ 0, 3 ]

    [%] Inferring {true} [k = 1] (4f x 11t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (i - 1))) & (! (j = ((i - 1) - 1))) & (6 <= j)                            
      [+] Added test ... [ 7, 10 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6
    [%] Inferring {true} [k = 1] (5f x 12t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (i - 1))) & (! (j = ((i - 1) - 1))) & (i <= (((6 + 1) + 1) + 1)) & (6 <= j)                            

     - Result = ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))

   # Loop_1 | Invariant @ Postcondition: ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))

   # Loop_1 | Inductive Check: ((!((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))) | (!(j >= i)) | ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1)))) is not valid!

   [Q2] Abduction query = ((!((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))) | (!(j >= i)) | ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1))))
   [#] Simplified query: ((!((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))) | (!(j >= i)) | ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1))))

    [%] Inferring {true} [k = 1] (0f x 5t) ...                                     
    [?] Verifying [k = 1] --- true                            
      [+] Added test ... [ 6, 6 ]

    [%] Removing conflicts ...  @2 @3 @4
    [%] Inferring {true} [k = 1] (1f x 6t) ...                                     
    [?] Verifying [k = 1] --- (! (6 = i))                            
      [+] Added test ... [ 6, 3 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6
    [%] Inferring {true} [k = 1] (2f x 7t) ...                                     
    [?] Verifying [k = 1] --- (! (6 = i)) & (! (j = (i * 2)))                            
      [+] Added test ... [ 6, 2 ]

    [%] Removing conflicts ...  @2 @3 @4
    [%] Inferring {true} [k = 1] (3f x 8t) ...                                     
    [?] Verifying [k = 1] --- (! (6 = i)) & (! (j = (i * 2))) & (! (i = 2))                            
      [+] Added test ... [ 6, 1 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6
    [%] Inferring {true} [k = 1] (4f x 9t) ...                                     
    [?] Verifying [k = 1] --- (! (6 = i)) & (! (j = (i * 2))) & (! (i = 2)) & (! (j = (6 * i)))                            
      [+] Added test ... [ 6, 0 ]

    [%] Removing conflicts ...  @2 @3
    [%] Inferring {true} [k = 1] (5f x 10t) ...                                     
    [?] Verifying [k = 1] --- (! (6 = i)) & (! (j = (i * 2))) & (! (i = 2)) & (! (j = (6 * i))) & (i > 0)                            
      [+] Added test ... [ 6, 5 ]

    [%] Removing conflicts ...  @2 @3 @4 @5
    [%] Inferring {true} [k = 1] (6f x 11t) ...                                     
    [?] Verifying [k = 1] --- (! (6 = i)) & (! (j = (i * 2))) & (! (i = 2)) & (! (j = (6 * i))) & (i > 0) & (! (j = (i + 1)))                            
      [+] Added test ... [ 6, 4 ]

    [%] Removing conflicts ...  @2 @3 @4 @5
    [%] Inferring {true} [k = 1] (7f x 12t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (i * 2))) & (! (j = (6 * i))) & (! (j = (i + 1))) & (1 = (i % 2))                            
      [+] Added test ... [ 6, -1 ]

    [%] Inferring {true} [k = 1] (7f x 13t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (i * 2))) & (! (j = (6 * i))) & (i > 0) & (! (j = (i + 1))) & (1 = (i % 2))                            
      [+] Added test ... [ 12, 9 ]

    [%] Removing conflicts ...  @2 @3 @4 @5
    [%] Inferring {true} [k = 1] (8f x 14t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (i * 2))) & (! (j = (6 * i))) & (i > 0) & (! (j = (i + 1))) & (6 > (j - 6)) & (1 = (i % 2))                            
      [+] Added test ... [ 9, 9 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6 @7 @8
    [%] Inferring {true} [k = 1] (9f x 15t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (i * 2))) & (! (j = (6 * i))) & (i > 0) & (! (j = (i + 1))) & (6 > (j - 6)) & ((j > i) | (j <= (6 + 1))) & (1 = (i % 2))                            
      [+] Added test ... [ 11, 9 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6
    [%] Inferring {true} [k = 1] (10f x 16t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (i * 2))) & (! (j = (6 * i))) & (i > 0) & (! (j = (i + 1))) & (6 > (j - 6)) & ((j > i) | (j <= (6 + 1))) & (! (j = ((i + 1) + 1))) & (1 = (i % 2))                            

     - Result = ((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2)))

   # Loop_1 | Invariant @ Inductive Condition: (((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j)))

   # Loop_1 | Inductive Check: ((!(((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j)))) | (!(j >= i)) | (((((((((!((j - 1) = ((i + 2) * 2))) & (!((j - 1) = (6 * (i + 2))))) & ((i + 2) > 0)) & (!((j - 1) = ((i + 2) + 1)))) & (6 > ((j - 1) - 6))) & (((j - 1) > (i + 2)) | ((j - 1) <= (6 + 1)))) & (!((j - 1) = (((i + 2) + 1) + 1)))) & (1 = ((i + 2) % 2))) & ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1))))) is not valid!

   [Q3] Abduction query = ((!(((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j)))) | (!(j >= i)) | (((((((((!((j - 1) = ((i + 2) * 2))) & (!((j - 1) = (6 * (i + 2))))) & ((i + 2) > 0)) & (!((j - 1) = ((i + 2) + 1)))) & (6 > ((j - 1) - 6))) & (((j - 1) > (i + 2)) | ((j - 1) <= (6 + 1)))) & (!((j - 1) = (((i + 2) + 1) + 1)))) & (1 = ((i + 2) % 2))) & ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1)))))
   [#] Simplified query: ((!(((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j)))) | (!(j >= i)) | (((((((((!((j - 1) = ((i + 2) * 2))) & (!((j - 1) = (6 * (i + 2))))) & ((i + 2) > 0)) & (!((j - 1) = ((i + 2) + 1)))) & (6 > ((j - 1) - 6))) & (((j - 1) > (i + 2)) | ((j - 1) <= (6 + 1)))) & (!((j - 1) = (((i + 2) + 1) + 1)))) & (1 = ((i + 2) % 2))) & ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1)))))

    [%] Inferring {true} [k = 1] (0f x 5t) ...                                     
    [?] Verifying [k = 1] --- true                            
      [+] Added test ... [ 8, 3 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6 @7
    [%] Inferring {true} [k = 1] (1f x 6t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (2 * (i + 1))))                            
      [+] Added test ... [ 10, 7 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6 @7
    [%] Inferring {true} [k = 1] (2f x 7t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (2 * (i + 1)))) & ((6 > i) | (j <= i))                            
      [+] Added test ... [ 7, 3 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6 @7
    [%] Inferring {true} [k = 1] (3f x 8t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (2 * (i + 1)))) & ((6 > i) | (j <= i)) & (! (j = ((i * 2) + 1)))                            
      [+] Added test ... [ 9, 5 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6 @7
    [%] Inferring {true} [k = 1] (4f x 9t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (2 * (i + 1)))) & ((6 > i) | (j <= i)) & (! (j = ((i * 2) + 1))) & (! (j = ((i * 2) - 1)))                            
      [+] Added test ... [ 7, 1 ]

    [%] Removing conflicts ...  @2 @3 @4 @5
    [%] Inferring {true} [k = 1] (5f x 10t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (2 * (i + 1)))) & ((6 > i) | (j <= i)) & (! (j = ((i * 2) + 1))) & (! (j = ((i * 2) - 1))) & (i > (j % 2))                            
      [+] Added test ... [ 11, 3 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6
    [%] Inferring {true} [k = 1] (6f x 11t) ...                                     
    [?] Verifying [k = 1] --- (! (j = (2 * (i + 1)))) & ((6 > i) | (j <= i)) & (! (j = ((i * 2) + 1))) & (! (j = ((i * 2) - 1))) & (i > (j % 2)) & (6 > ((j % 6) + 1))                            

     - Result = ((((((!(j = (2 * (i + 1)))) & ((6 > i) | (j <= i))) & (!(j = ((i * 2) + 1)))) & (!(j = ((i * 2) - 1)))) & (i > (j % 2))) & (6 > ((j % 6) + 1)))

   # Loop_1 | Invariant @ Inductive Condition: (((((((!(j = (2 * (i + 1)))) & ((6 > i) | (j <= i))) & (!(j = ((i * 2) + 1)))) & (!(j = ((i * 2) - 1)))) & (i > (j % 2))) & (6 > ((j % 6) + 1))) & (((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))))

   # Loop_1 | Inductive Check: ((!(((((((!(j = (2 * (i + 1)))) & ((6 > i) | (j <= i))) & (!(j = ((i * 2) + 1)))) & (!(j = ((i * 2) - 1)))) & (i > (j % 2))) & (6 > ((j % 6) + 1))) & (((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))))) | (!(j >= i)) | (((((((!((j - 1) = (2 * ((i + 2) + 1)))) & ((6 > (i + 2)) | ((j - 1) <= (i + 2)))) & (!((j - 1) = (((i + 2) * 2) + 1)))) & (!((j - 1) = (((i + 2) * 2) - 1)))) & ((i + 2) > ((j - 1) % 2))) & (6 > (((j - 1) % 6) + 1))) & (((((((((!((j - 1) = ((i + 2) * 2))) & (!((j - 1) = (6 * (i + 2))))) & ((i + 2) > 0)) & (!((j - 1) = ((i + 2) + 1)))) & (6 > ((j - 1) - 6))) & (((j - 1) > (i + 2)) | ((j - 1) <= (6 + 1)))) & (!((j - 1) = (((i + 2) + 1) + 1)))) & (1 = ((i + 2) % 2))) & ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1)))))) is not valid!

   [Q4] Abduction query = ((!(((((((!(j = (2 * (i + 1)))) & ((6 > i) | (j <= i))) & (!(j = ((i * 2) + 1)))) & (!(j = ((i * 2) - 1)))) & (i > (j % 2))) & (6 > ((j % 6) + 1))) & (((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))))) | (!(j >= i)) | (((((((!((j - 1) = (2 * ((i + 2) + 1)))) & ((6 > (i + 2)) | ((j - 1) <= (i + 2)))) & (!((j - 1) = (((i + 2) * 2) + 1)))) & (!((j - 1) = (((i + 2) * 2) - 1)))) & ((i + 2) > ((j - 1) % 2))) & (6 > (((j - 1) % 6) + 1))) & (((((((((!((j - 1) = ((i + 2) * 2))) & (!((j - 1) = (6 * (i + 2))))) & ((i + 2) > 0)) & (!((j - 1) = ((i + 2) + 1)))) & (6 > ((j - 1) - 6))) & (((j - 1) > (i + 2)) | ((j - 1) <= (6 + 1)))) & (!((j - 1) = (((i + 2) + 1) + 1)))) & (1 = ((i + 2) % 2))) & ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1))))))
   [#] Simplified query: ((!(((((((!(j = (2 * (i + 1)))) & ((6 > i) | (j <= i))) & (!(j = ((i * 2) + 1)))) & (!(j = ((i * 2) - 1)))) & (i > (j % 2))) & (6 > ((j % 6) + 1))) & (((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j))))) | (!(j >= i)) | (((((((!((j - 1) = (2 * ((i + 2) + 1)))) & ((6 > (i + 2)) | ((j - 1) <= (i + 2)))) & (!((j - 1) = (((i + 2) * 2) + 1)))) & (!((j - 1) = (((i + 2) * 2) - 1)))) & ((i + 2) > ((j - 1) % 2))) & (6 > (((j - 1) % 6) + 1))) & (((((((((!((j - 1) = ((i + 2) * 2))) & (!((j - 1) = (6 * (i + 2))))) & ((i + 2) > 0)) & (!((j - 1) = ((i + 2) + 1)))) & (6 > ((j - 1) - 6))) & (((j - 1) > (i + 2)) | ((j - 1) <= (6 + 1)))) & (!((j - 1) = (((i + 2) + 1) + 1)))) & (1 = ((i + 2) % 2))) & ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1))))))

    [%] Inferring {true} [k = 1] (0f x 5t) ...                                     
    [?] Verifying [k = 1] --- true                            
      [+] Added test ... [ 10, 3 ]

    [%] Removing conflicts ...  @2 @3 @4 @5 @6 @7
    [%] Inferring {true} [k = 1] (1f x 6t) ...                                     
    [?] Verifying [k = 1] --- (! (j = ((6 + i) + 1)))                            

     - Result = (!(j = ((6 + i) + 1)))

   # Loop_1 | Invariant @ Inductive Condition: ((!(j = ((6 + i) + 1))) & (((((((!(j = (2 * (i + 1)))) & ((6 > i) | (j <= i))) & (!(j = ((i * 2) + 1)))) & (!(j = ((i * 2) - 1)))) & (i > (j % 2))) & (6 > ((j % 6) + 1))) & (((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j)))))

   # Loop_1 | Inductive Check: ((!((!(j = ((6 + i) + 1))) & (((((((!(j = (2 * (i + 1)))) & ((6 > i) | (j <= i))) & (!(j = ((i * 2) + 1)))) & (!(j = ((i * 2) - 1)))) & (i > (j % 2))) & (6 > ((j % 6) + 1))) & (((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j)))))) | (!(j >= i)) | ((!((j - 1) = ((6 + (i + 2)) + 1))) & (((((((!((j - 1) = (2 * ((i + 2) + 1)))) & ((6 > (i + 2)) | ((j - 1) <= (i + 2)))) & (!((j - 1) = (((i + 2) * 2) + 1)))) & (!((j - 1) = (((i + 2) * 2) - 1)))) & ((i + 2) > ((j - 1) % 2))) & (6 > (((j - 1) % 6) + 1))) & (((((((((!((j - 1) = ((i + 2) * 2))) & (!((j - 1) = (6 * (i + 2))))) & ((i + 2) > 0)) & (!((j - 1) = ((i + 2) + 1)))) & (6 > ((j - 1) - 6))) & (((j - 1) > (i + 2)) | ((j - 1) <= (6 + 1)))) & (!((j - 1) = (((i + 2) + 1) + 1)))) & (1 = ((i + 2) % 2))) & ((((!((j - 1) = ((i + 2) - 1))) & (!((j - 1) = (((i + 2) - 1) - 1)))) & ((i + 2) <= (((6 + 1) + 1) + 1))) & (6 <= (j - 1))))))) is valid!

   # Precondition Check: ((!(10 = ((6 + 1) + 1))) & (((((((!(10 = (2 * (1 + 1)))) & ((6 > 1) | (10 <= 1))) & (!(10 = ((1 * 2) + 1)))) & (!(10 = ((1 * 2) - 1)))) & (1 > (10 % 2))) & (6 > ((10 % 6) + 1))) & (((((((((!(10 = (1 * 2))) & (!(10 = (6 * 1)))) & (1 > 0)) & (!(10 = (1 + 1)))) & (6 > (10 - 6))) & ((10 > 1) | (10 <= (6 + 1)))) & (!(10 = ((1 + 1) + 1)))) & (1 = (1 % 2))) & ((((!(10 = (1 - 1))) & (!(10 = ((1 - 1) - 1)))) & (1 <= (((6 + 1) + 1) + 1))) & (6 <= 10))))) is valid!


[###] Final invariants: [###]
Loop #1: ((!(j = ((6 + i) + 1))) & (((((((!(j = (2 * (i + 1)))) & ((6 > i) | (j <= i))) & (!(j = ((i * 2) + 1)))) & (!(j = ((i * 2) - 1)))) & (i > (j % 2))) & (6 > ((j % 6) + 1))) & (((((((((!(j = (i * 2))) & (!(j = (6 * i)))) & (i > 0)) & (!(j = (i + 1)))) & (6 > (j - 6))) & ((j > i) | (j <= (6 + 1)))) & (!(j = ((i + 1) + 1)))) & (1 = (i % 2))) & ((((!(j = (i - 1))) & (!(j = ((i - 1) - 1)))) & (i <= (((6 + 1) + 1) + 1))) & (6 <= j)))))
================================================================================
checker_exec.sh: line 1: 24927 Aborted                 (core dumped) bin/pinvgen -wpath /home/saswat/Repos/PIE/logs/limit_8gb/6400/pie/16/cggmp.cpp -abducer /home/saswat/Repos/PIE/abducer/abduce.sh -tool=pie -csize 16 --extra-arg=--std=c++11 /home/saswat/Repos/PIE/abducer/../bm_ice/cggmp.cpp --

real	0m31.716s
user	0m28.104s
sys	0m0.924s


--- Processed cggmp.cpp ---
sat: 28
unsat: 6
unk: 0
escher: 22

[$] OOM Count = 0
[$] MAX Usage = 183
