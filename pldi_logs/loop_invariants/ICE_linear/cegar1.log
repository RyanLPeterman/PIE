 ==>
6400 tests for loop #1.

(*) Checking loop invariant:
================================================================================
[#] Starting Loop Invariant Generation ...

   + Found guard in B6 for loop #1

     - post_1 : (((true & (!((x = 4) & (y = 0)))) | (!(x = 4))) & ((true & (!((x = 4) & (y = 0)))) | (x = 4)))
     - guard : (input != 0)

   [Q1] Abduction query = ((input != 0) | (((true & (!((x = 4) & (y = 0)))) | (!(x = 4))) & ((true & (!((x = 4) & (y = 0)))) | (x = 4))))
   [#] Simplified query: ((input != 0) | (((true & (!((x = 4) & (y = 0)))) | (!(x = 4))) & ((true & (!((x = 4) & (y = 0)))) | (x = 4))))

    [%] Inferring {true} [k = 1] (0f x 6400t) ...                                     
    [?] Verifying [k = 1] --- true                            
      [+] Added test ... [ 0, 4, 0 ]

    [%] Removing conflicts ...  @2 @3
    [%] Removing conflicts ...  @2 @3 @4
    [%] Removing conflicts ...  @2 @3
    [%] Inferring {true} [k = 1] (3f x 6401t) ...                                     
    [%] Inferring {true} [k = 2] (3f x 6401t) ...                                     
    [%] Inferring {true} [k = 3] (3f x 6401t) ...                                     
    [?] Verifying [k = 3] --- ((y > 4) | (! (y = input)) | (4 = y))                            

     - Result = (((y > 4) | (!(y = input))) | (4 = y))

   # Loop_1 | Invariant @ Postcondition: (((y > 4) | (!(y = input))) | (4 = y))

   # Loop_1 | Inductive Check: ((!(((y > 4) | (!(y = input))) | (4 = y))) | (!(input != 0)) | ((((y + 2) > 4) | (!((y + 2) = input))) | (4 = (y + 2)))) is not valid!

   [Q2] Abduction query = ((!(((y > 4) | (!(y = input))) | (4 = y))) | (!(input != 0)) | ((((y + 2) > 4) | (!((y + 2) = input))) | (4 = (y + 2))))
   [#] Simplified query: ((!(((y > 4) | (!(y = input))) | (4 = y))) | (!(input != 0)) | ((((y + 2) > 4) | (!((y + 2) = input))) | (4 = (y + 2))))

    [%] Inferring {true} [k = 1] (0f x 6400t) ...                                     
    [?] Verifying [k = 1] --- true                            
      [+] Added test ... [ -3, -1 ]

    [%] Removing conflicts ...  @2 @3
    [%] Removing conflicts ...  @2 @3
    [%] Inferring {true} [k = 1] (2f x 6401t) ...                                     
    [?] Verifying [k = 1] --- (0 <= y)                            
      [+] Added test ... [ 0, 2 ]

    [%] Removing conflicts ...  @2 @3 @4
    [%] Inferring {true} [k = 1] (3f x 6402t) ...                                     
    [%] Inferring {true} [k = 2] (3f x 6402t) ...                                     
    [?] Verifying [k = 2] --- ((y > 4) | (! (2 = input))) & (0 <= y)                            
      [+] Added test ... [ 1, 3 ]

    [%] Removing conflicts ...  @2 @3 @4
    [%] Removing conflicts ...  @2 @3 @4 @5
    [%] Inferring {true} [k = 1] (5f x 6403t) ...                                     
    [%] Inferring {true} [k = 2] (5f x 6403t) ...                                     
    [?] Verifying [k = 2] --- ((y > 4) | (! (2 = input))) & ((! (y = 1)) | (! (4 = (input + 1)))) & (0 <= y)                            

     - Result = ((((y > 4) | (!(2 = input))) & ((!(y = 1)) | (!(4 = (input + 1))))) & (0 <= y))

   # Loop_1 | Invariant @ Inductive Condition: (((((y > 4) | (!(2 = input))) & ((!(y = 1)) | (!(4 = (input + 1))))) & (0 <= y)) & (((y > 4) | (!(y = input))) | (4 = y)))

   # Loop_1 | Inductive Check: ((!(((((y > 4) | (!(2 = input))) & ((!(y = 1)) | (!(4 = (input + 1))))) & (0 <= y)) & (((y > 4) | (!(y = input))) | (4 = y)))) | (!(input != 0)) | ((((((y + 2) > 4) | (!(2 = input))) & ((!((y + 2) = 1)) | (!(4 = (input + 1))))) & (0 <= (y + 2))) & ((((y + 2) > 4) | (!((y + 2) = input))) | (4 = (y + 2))))) is valid!

   # Precondition Check: ((((!((0 <= x) & (x <= 2))) | ((((!((0 <= y) & (y <= 2))) | (((((y > 4) | (!(2 = input))) & ((!(y = 1)) | (!(4 = (input + 1))))) & (0 <= y)) & (((y > 4) | (!(y = input))) | (4 = y)))) | (!(0 <= y))) & (((!((0 <= y) & (y <= 2))) | (((((y > 4) | (!(2 = input))) & ((!(y = 1)) | (!(4 = (input + 1))))) & (0 <= y)) & (((y > 4) | (!(y = input))) | (4 = y)))) | (0 <= y)))) | (!(0 <= x))) & (((!((0 <= x) & (x <= 2))) | ((((!((0 <= y) & (y <= 2))) | (((((y > 4) | (!(2 = input))) & ((!(y = 1)) | (!(4 = (input + 1))))) & (0 <= y)) & (((y > 4) | (!(y = input))) | (4 = y)))) | (!(0 <= y))) & (((!((0 <= y) & (y <= 2))) | (((((y > 4) | (!(2 = input))) & ((!(y = 1)) | (!(4 = (input + 1))))) & (0 <= y)) & (((y > 4) | (!(y = input))) | (4 = y)))) | (0 <= y)))) | (0 <= x)))    [+] Root state for counter-examples : {'y': '0', 'x': '0', 'input': '0'}
 is not valid!

----------------------------------< RESTART >-----------------------------------

   + Found guard in B6 for loop #1

     - post_1 : (((true & (!((x = 4) & (y = 0)))) | (!(x = 4))) & ((true & (!((x = 4) & (y = 0)))) | (x = 4)))
     - guard : (input != 0)

   [Q3] Abduction query = ((input != 0) | (((true & (!((x = 4) & (y = 0)))) | (!(x = 4))) & ((true & (!((x = 4) & (y = 0)))) | (x = 4))))
   [#] Simplified query: ((input != 0) | (((true & (!((x = 4) & (y = 0)))) | (!(x = 4))) & ((true & (!((x = 4) & (y = 0)))) | (x = 4))))

    [%] Inferring {true} [k = 1] (0f x 6401t) ...                                     
    [?] Verifying [k = 1] --- true                            
      [+] Added test ... [ 0, 4, 0 ]

    [%] Removing conflicts ...  @2 @3 @4
    [%] Removing conflicts ...  @2 @3
    [%] Inferring {true} [k = 1] (2f x 6402t) ...                                     
    [%] Inferring {true} [k = 2] (2f x 6402t) ...                                     
    [?] Verifying [k = 2] --- ((! (x = 4)) | (y > 1))                            

     - Result = ((!(x = 4)) | (y > 1))

   # Loop_1 | Invariant @ Postcondition: ((!(x = 4)) | (y > 1))

   # Loop_1 | Inductive Check: ((!((!(x = 4)) | (y > 1))) | (!(input != 0)) | ((!((x + 2) = 4)) | ((y + 2) > 1))) is not valid!

   [Q4] Abduction query = ((!((!(x = 4)) | (y > 1))) | (!(input != 0)) | ((!((x + 2) = 4)) | ((y + 2) > 1)))
   [#] Simplified query: ((!((!(x = 4)) | (y > 1))) | (!(input != 0)) | ((!((x + 2) = 4)) | ((y + 2) > 1)))

    [%] Inferring {true} [k = 1] (0f x 6401t) ...                                     
    [?] Verifying [k = 1] --- true                            
      [+] Added test ... [ 2, -1, -1 ]

    [%] Removing conflicts ...  @2 @3
    [%] Inferring {true} [k = 1] (1f x 6402t) ...                                     
    [?] Verifying [k = 1] --- (0 <= y)                            

     - Result = (0 <= y)

   # Loop_1 | Invariant @ Inductive Condition: ((0 <= y) & ((!(x = 4)) | (y > 1)))

   # Loop_1 | Inductive Check: ((!((0 <= y) & ((!(x = 4)) | (y > 1)))) | (!(input != 0)) | ((0 <= (y + 2)) & ((!((x + 2) = 4)) | ((y + 2) > 1)))) is valid!

   # Precondition Check: ((((!((0 <= x) & (x <= 2))) | ((((!((0 <= y) & (y <= 2))) | ((0 <= y) & ((!(x = 4)) | (y > 1)))) | (!(0 <= y))) & (((!((0 <= y) & (y <= 2))) | ((0 <= y) & ((!(x = 4)) | (y > 1)))) | (0 <= y)))) | (!(0 <= x))) & (((!((0 <= x) & (x <= 2))) | ((((!((0 <= y) & (y <= 2))) | ((0 <= y) & ((!(x = 4)) | (y > 1)))) | (!(0 <= y))) & (((!((0 <= y) & (y <= 2))) | ((0 <= y) & ((!(x = 4)) | (y > 1)))) | (0 <= y)))) | (0 <= x))) is valid!


[###] Final invariants: [###]
Loop #1: ((0 <= y) & ((!(x = 4)) | (y > 1)))
================================================================================
checker_exec.sh: line 1: 20668 Aborted                 (core dumped) bin/pinvgen -wpath /home/saswat/Repos/PIE/logs/limit_8gb/6400/pie/16/cegar1.cpp -abducer /home/saswat/Repos/PIE/abducer/abduce.sh -tool=pie -csize 16 --extra-arg=--std=c++11 /home/saswat/Repos/PIE/abducer/../bm_ice/cegar1.cpp --

real	0m30.314s
user	0m27.640s
sys	0m0.604s


--- Processed cegar1.cpp ---
sat: 9
unsat: 7
unk: 0
escher: 11

[$] OOM Count = 0
[$] MAX Usage = 139
