 ==>
6400 tests for loop #1.
6400 tests for loop #2.
6400 tests for loop #3.
6400 tests for loop #4.

(*) Checking loop invariant:
================================================================================
[#] Starting Loop Invariant Generation ...

   + Found guard in B8 for loop #4

     - post_4 : (((true & ((w >= z) & ((a - b) = 0))) | (!(w >= z))) & ((true & ((w >= z) & ((a - b) = 0))) | (w >= z)))
     - guard : NON-DETERMINISTIC

   [Q1] Abduction query = (false | (((true & ((w >= z) & ((a - b) = 0))) | (!(w >= z))) & ((true & ((w >= z) & ((a - b) = 0))) | (w >= z))))
   [#] Simplified query: (false | (((true & ((w >= z) & ((a - b) = 0))) | (!(w >= z))) & ((true & ((w >= z) & ((a - b) = 0))) | (w >= z))))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ -1, 0, 0, 0 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (z = w)                            
      [+] Added test ... [ 0, 0, -1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5
    [?] Verifying --- (z <= (w + a))                            
      [+] Added test ... [ -1, 0, 1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- ((b <= a) & (z = w))                            
      [+] Added test ... [ 0, 0, 1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- ((z = w) & (a = b))                            

     - Result = ((z = w) & (a = b))

   # Loop_4 | Invariant @ Postcondition: ((z = w) & (a = b))

   # Loop_4 | Inductive Check: ((!((z = w) & (a = b))) | false | ((((z = w) & ((a + 1) = (b + 1))) | (!(flag != 0))) & (((z = w) & ((a + (c + 1)) = (b + (d + 1)))) | (flag != 0)))) is not valid!

   [Q2] Abduction query = ((!((z = w) & (a = b))) | false | ((((z = w) & ((a + 1) = (b + 1))) | (!(flag != 0))) & (((z = w) & ((a + (c + 1)) = (b + (d + 1)))) | (flag != 0))))
   [#] Simplified query: ((!((z = w) & (a = b))) | false | ((((z = w) & ((a + 1) = (b + 1))) | (!(flag != 0))) & (((z = w) & ((a + (c + 1)) = (b + (d + 1)))) | (flag != 0))))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, 0, 0, 0, 0, -1, 0 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (d = c)                            

     - Result = (d = c)

   # Loop_4 | Invariant @ Inductive Condition: ((d = c) & ((z = w) & (a = b)))

   # Loop_4 | Inductive Check: ((!((d = c) & ((z = w) & (a = b)))) | false | (((((d + 1) = (c + 1)) & ((z = w) & ((a + 1) = (b + 1)))) | (!(flag != 0))) & ((((d + 1) = (c + 1)) & ((z = w) & ((a + (c + 1)) = (b + (d + 1))))) | (flag != 0)))) is valid!

   + Found guard in B23 for loop #1

     - post_1 : ((0 = 0) & ((z = w) & (a = b)))
     - guard : NON-DETERMINISTIC

   [Q3] Abduction query = (false | ((0 = 0) & ((z = w) & (a = b))))
   [#] Simplified query: (false | ((0 = 0) & ((z = w) & (a = b))))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, -1, 0, 0 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (z = w)                            
      [+] Added test ... [ 0, 0, -1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5
    [?] Verifying --- (z = (w - a))                            
      [+] Added test ... [ 0, -1, -1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5
    [?] Verifying --- (z = (w + a))                            
      [+] Added test ... [ 0, -1, 1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- ((b <= a) & (a <= w))                            
      [+] Added test ... [ 1, 0, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- ((b <= a) & (z = w))                            
      [+] Added test ... [ 0, 0, 1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- ((z = w) & (a = b))                            

     - Result = ((z = w) & (a = b))

   # Loop_1 | Invariant @ Postcondition: ((z = w) & (a = b))

   + Found guard in B16 for loop #3

     - post_3 : (((z + 1) = ((x + y) + 1)) & (a = b))
     - guard : NON-DETERMINISTIC

   [Q4] Abduction query = (false | (((z + 1) = ((x + y) + 1)) & (a = b)))
   [#] Simplified query: (false | (((z + 1) = ((x + y) + 1)) & (a = b)))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, 0, -1, 0, 0 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (x > 1)                            
      [+] Added test ... [ 0, 2, 0, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4
    [?] Verifying --- (x > (1 + 1))                            
      [+] Added test ... [ 0, 3, 0, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4
    [?] Verifying --- (z > (y + 1))                            
      [+] Added test ... [ 0, 0, -2, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5
    [?] Verifying --- (x = (z - y))                            
      [+] Added test ... [ 0, 0, 0, -1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5
    [?] Verifying --- (x > ((1 + 1) + 1))                            
      [+] Added test ... [ 0, 4, 0, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5
    [?] Verifying --- (z > ((y + 1) + 1))                            
      [+] Added test ... [ 0, 0, -3, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6
    [?] Verifying --- (z > (((y + 1) + 1) + 1))                            
      [+] Added test ... [ 0, 0, -4, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- ((z > y) & (x > a))                            
      [+] Added test ... [ 0, 0, -1, -1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- ((z > y) & (x > 1))                            
      [+] Added test ... [ 0, 2, -1, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- (x = (z - (a + y)))                            
      [+] Added test ... [ 0, 0, -1, 1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7
    [?] Verifying --- (x > ((((y + 1) + 1) + 1) + 1))                            
      [+] Added test ... [ 0, 0, -5, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7 @8
    [?] Verifying --- ((z > y) & (x > (1 + 1)))                            
      [+] Added test ... [ 0, 3, -1, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7 @8
    [?] Verifying --- ((x > a) & (z > (y + 1)))                            
      [+] Added test ... [ 0, 0, -2, -1, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7 @8
    [?] Verifying --- ((x > 1) & (z > (y + 1)))                            
      [+] Added test ... [ 0, 2, -3, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7 @8
    [?] Verifying --- (x > (((((y + 1) + 1) + 1) + 1) + 1))                            
      [+] Added test ... [ 0, 0, -6, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4 @5 @6 @7 @8 @9/home/saswat/Repos/PIE/abducer/abduce.sh: line 52: 20007 Killed                  OCAMLRUNPARAM=l=1024M "./$FILE.e" > "./$FILE.exe_out"
Traceback (most recent call last):
  File "/home/saswat/Repos/PIE/logs/limit_8gb/6400/escher/all/36.cpp/mcf2xml", line 85, in <module>
    print(toXML(expr.parseString(mcf, parseAll=True).asList()))
  File "/usr/local/lib/python2.7/dist-packages/pyparsing-1.5.7-py2.7.egg/pyparsing.py", line 1006, in parseString
    raise exc
pyparsing.ParseException: Expected "#get" (at char 0), (line:1, col:1)
checker_exec.sh: line 1:  6092 Segmentation fault      (core dumped) bin/pinvgen -wpath /home/saswat/Repos/PIE/logs/limit_8gb/6400/escher/all/36.cpp -abducer /home/saswat/Repos/PIE/abducer/abduce.sh -tool=escher -csize all --extra-arg=--std=c++11 /home/saswat/Repos/PIE/abducer/../bm_hola/36.cpp --

real	106m37.823s
user	106m11.464s
sys	0m13.396s


--- Processed 36.cpp ---
sat: 28
unsat: 4
unk: 0
escher: 30

[$] OOM Count = 407063
[$] MAX Usage = 8192
