 ==>
6400 tests for loop #1.
6400 tests for loop #2.
6400 tests for loop #3.

(*) Checking loop invariant:
================================================================================
[#] Starting Loop Invariant Generation ...

   + Found guard in B11 for loop #2

     - post_2 : (true & (x = y))
     - guard : NON-DETERMINISTIC

   [Q1] Abduction query = (false | (true & (x = y)))
   [#] Simplified query: (false | (true & (x = y)))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, -1 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (x = y)                            

     - Result = (x = y)

   # Loop_2 | Invariant @ Postcondition: (x = y)

   + Found guard in B9 for loop #3

     - post_3 : (x = y)
     - guard : NON-DETERMINISTIC

   [Q2] Abduction query = (false | (x = y))
   [#] Simplified query: (false | (x = y))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, -1 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (x = y)                            

     - Result = (x = y)

   # Loop_3 | Invariant @ Postcondition: (x = y)

   # Loop_3 | Inductive Check: ((!(x = y)) | false | ((((((x + 1) = (y + 1)) | (!((z % 2) = 0))) & (((x + 1) = y) | ((z % 2) = 0))) | (!((w % 2) = 1))) & ((((x = (y + 1)) | (!((z % 2) = 0))) & ((x = y) | ((z % 2) = 0))) | ((w % 2) = 1)))) is not valid!

   [Q3] Abduction query = ((!(x = y)) | false | ((((((x + 1) = (y + 1)) | (!((z % 2) = 0))) & (((x + 1) = y) | ((z % 2) = 0))) | (!((w % 2) = 1))) & ((((x = (y + 1)) | (!((z % 2) = 0))) & ((x = y) | ((z % 2) = 0))) | ((w % 2) = 1))))
   [#] Simplified query: ((!(x = y)) | false | ((((((x + 1) = (y + 1)) | (!((z % 2) = 0))) & (((x + 1) = y) | ((z % 2) = 0))) | (!((w % 2) = 1))) & ((((x = (y + 1)) | (!((z % 2) = 0))) & ((x = y) | ((z % 2) = 0))) | ((w % 2) = 1))))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, 0, 1, 1 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (w > z)                            
      [+] Added test ... [ 0, 0, -1, 1 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (y > 2)                            
      [+] Added test ... [ 3, 3, 1, 1 ]

    [*] Synthesizing ---  @2 @3 @4
    [?] Verifying --- (w = (z + 1))                            

     - Result = (w = (z + 1))

   # Loop_3 | Invariant @ Inductive Condition: ((w = (z + 1)) & (x = y))

   # Loop_3 | Inductive Check: ((!((w = (z + 1)) & (x = y))) | false | ((((((w = (z + 1)) & ((x + 1) = (y + 1))) | (!((z % 2) = 0))) & (((w = (z + 1)) & ((x + 1) = y)) | ((z % 2) = 0))) | (!((w % 2) = 1))) & (((((w = (z + 1)) & (x = (y + 1))) | (!((z % 2) = 0))) & (((w = (z + 1)) & (x = y)) | ((z % 2) = 0))) | ((w % 2) = 1)))) is valid!

   # Loop_2 | Inductive Check: ((!(x = y)) | false | ((w = (z + 1)) & (x = y))) is not valid!

   [Q4] Abduction query = ((!(x = y)) | false | ((w = (z + 1)) & (x = y)))
   [#] Simplified query: ((!(x = y)) | false | ((w = (z + 1)) & (x = y)))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, 0, 0, 0 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (w > z)                            
      [+] Added test ... [ 0, 0, 2, 0 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (y > 1)                            
      [+] Added test ... [ 2, 2, 0, 0 ]

    [*] Synthesizing ---  @2 @3 @4
    [?] Verifying --- (w = (z + 1))                            

     - Result = (w = (z + 1))

   # Loop_2 | Invariant @ Inductive Condition: ((w = (z + 1)) & (x = y))

   + Found guard in B9 for loop #3

     - post_3 : ((((x + y) + 1) = ((x + y) + 1)) & (x = y))
     - guard : NON-DETERMINISTIC

   [Q5] Abduction query = (false | ((((x + y) + 1) = ((x + y) + 1)) & (x = y)))
   [#] Simplified query: (false | ((((x + y) + 1) = ((x + y) + 1)) & (x = y)))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, -1 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (x = y)                            

     - Result = (x = y)

   # Loop_3 | Invariant @ Postcondition: (x = y)

   # Loop_3 | Inductive Check: ((!(x = y)) | false | ((((((x + 1) = (y + 1)) | (!((z % 2) = 0))) & (((x + 1) = y) | ((z % 2) = 0))) | (!((w % 2) = 1))) & ((((x = (y + 1)) | (!((z % 2) = 0))) & ((x = y) | ((z % 2) = 0))) | ((w % 2) = 1)))) is not valid!

   [Q6] Abduction query = ((!(x = y)) | false | ((((((x + 1) = (y + 1)) | (!((z % 2) = 0))) & (((x + 1) = y) | ((z % 2) = 0))) | (!((w % 2) = 1))) & ((((x = (y + 1)) | (!((z % 2) = 0))) & ((x = y) | ((z % 2) = 0))) | ((w % 2) = 1))))
   [#] Simplified query: ((!(x = y)) | false | ((((((x + 1) = (y + 1)) | (!((z % 2) = 0))) & (((x + 1) = y) | ((z % 2) = 0))) | (!((w % 2) = 1))) & ((((x = (y + 1)) | (!((z % 2) = 0))) & ((x = y) | ((z % 2) = 0))) | ((w % 2) = 1))))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, 0, 1, 1 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (w > z)                            
      [+] Added test ... [ 0, 0, -1, 1 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (y > 2)                            
      [+] Added test ... [ 3, 3, 1, 1 ]

    [*] Synthesizing ---  @2 @3 @4
    [?] Verifying --- (w = (z + 1))                            

     - Result = (w = (z + 1))

   # Loop_3 | Invariant @ Inductive Condition: ((w = (z + 1)) & (x = y))

   # Loop_3 | Inductive Check: ((!((w = (z + 1)) & (x = y))) | false | ((((((w = (z + 1)) & ((x + 1) = (y + 1))) | (!((z % 2) = 0))) & (((w = (z + 1)) & ((x + 1) = y)) | ((z % 2) = 0))) | (!((w % 2) = 1))) & (((((w = (z + 1)) & (x = (y + 1))) | (!((z % 2) = 0))) & (((w = (z + 1)) & (x = y)) | ((z % 2) = 0))) | ((w % 2) = 1)))) is valid!

   # Loop_2 | Inductive Check: ((!((w = (z + 1)) & (x = y))) | false | ((w = (z + 1)) & (x = y))) is valid!

   + Found guard in B19 for loop #1

     - post_1 : ((((1 = (0 + 1)) & (y = y)) | (!(j >= i))) & (((1 = (0 + 1)) & ((y + 1) = y)) | (j >= i)))
     - guard : NON-DETERMINISTIC

   [Q7] Abduction query = (false | ((((1 = (0 + 1)) & (y = y)) | (!(j >= i))) & (((1 = (0 + 1)) & ((y + 1) = y)) | (j >= i))))
   [#] Simplified query: (false | ((((1 = (0 + 1)) & (y = y)) | (!(j >= i))) & (((1 = (0 + 1)) & ((y + 1) = y)) | (j >= i))))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, -1, 0 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (i <= j)                            

     - Result = (i <= j)

   # Loop_1 | Invariant @ Postcondition: (i <= j)

   # Loop_1 | Inductive Check: ((!(i <= j)) | false | ((((i + (x + 1)) <= ((j + (y + 1)) + 1)) | (!(flag != 0))) & (((i + (x + 1)) <= (j + (y + 1))) | (flag != 0)))) is not valid!

   [Q8] Abduction query = ((!(i <= j)) | false | ((((i + (x + 1)) <= ((j + (y + 1)) + 1)) | (!(flag != 0))) & (((i + (x + 1)) <= (j + (y + 1))) | (flag != 0))))
   [#] Simplified query: ((!(i <= j)) | false | ((((i + (x + 1)) <= ((j + (y + 1)) + 1)) | (!(flag != 0))) & (((i + (x + 1)) <= (j + (y + 1))) | (flag != 0))))

    [*] Synthesizing --- 
    [?] Verifying --- true                            
      [+] Added test ... [ 0, 0, 0, -2, -1 ]

    [*] Synthesizing ---  @2 @3
    [?] Verifying --- (x = y)                            

     - Result = (x = y)

   # Loop_1 | Invariant @ Inductive Condition: ((x = y) & (i <= j))

   # Loop_1 | Inductive Check: ((!((x = y) & (i <= j))) | false | (((((x + 1) = (y + 1)) & ((i + (x + 1)) <= ((j + (y + 1)) + 1))) | (!(flag != 0))) & ((((x + 1) = (y + 1)) & ((i + (x + 1)) <= (j + (y + 1)))) | (flag != 0)))) is valid!

   # Precondition Check: ((0 = 0) & (0 <= 0)) is valid!


[###] Final invariants: [###]
Loop #1: ((x = y) & (i <= j))
Loop #2: ((w = (z + 1)) & (x = y))
Loop #3: ((w = (z + 1)) & (x = y))
================================================================================
checker_exec.sh: line 1: 15756 Aborted                 (core dumped) bin/pinvgen -wpath /home/saswat/Repos/PIE/logs/limit_8gb/6400/escher/all/45.cpp -abducer /home/saswat/Repos/PIE/abducer/abduce.sh -tool=escher -csize all --extra-arg=--std=c++11 /home/saswat/Repos/PIE/abducer/../bm_hola/45.cpp --

real	0m58.269s
user	0m53.220s
sys	0m1.488s


--- Processed 45.cpp ---
sat: 18
unsat: 13
unk: 0
escher: 22

[$] OOM Count = 0
[$] MAX Usage = 290
